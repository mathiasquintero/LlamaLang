
// While Loop approach.
// More generic by simulating a while loop though recursion

let while = c f a -> c ? while ((f a).condition) f ((f a).result) : (f a).result

let apply = f a -> f (a.accumulator) (a.current)

let next = f a -> { accumulator: apply f a, current: a.current + 1, last: a.last }

let helper = f a -> {result: next f a, condition: (a.current) != (a.last) }

let sum = x y -> x + y

let myFun = a -> helper sum a

let start = { accumulator: 0, current: 0, last: 99}

let result = (while true myFun start).accumulator

print "Summing all the numbers from one to 100:"
print "By simulating a loop"
print result
print ""

// Second Approach

let sumHelper = a b r -> a = (b + 1) ? r : sumHelper (a + 1) b (r + a)

let tailSum = a b -> sumHelper a b 0

let tailRecursiveResult = tailSum 0 100

print "With Tail Recursion"
print tailRecursiveResult
print ""
