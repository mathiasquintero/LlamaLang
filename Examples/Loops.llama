
// While Loop approach.
// More generic by simulating a while loop though recursion

let while = c f a -> c ? while ((f a)[1]) f ((f a)[0]) : (f a)[0]

let newAccumulator = f a -> [f (a[0]) (a[1]), a[1] + 1, a[2]]

let helper = f a -> [newAccumulator f a, (a[1]) != (a[2])]

let sum = x y -> x + y

let myFunc = a -> helper sum a

let result = (while true myFunc [0, 1, 99])[0]

print "Summing all the numbers from one to 100:"
print "By simulating a loop"
print result
print ""

// Second Approach

let sumHelper = a b r -> a = (b + 1) ? r : sumHelper (a + 1) b (r + a)

let tailSum = a b -> sumHelper a b 0

let tailRecursiveResult = tailSum 0 100

print "With Tail Recursion"
print tailRecursiveResult
print ""
